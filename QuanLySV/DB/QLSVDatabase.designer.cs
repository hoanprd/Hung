#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLySV.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLySinhVien")]
	public partial class QLSVDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDIEMSV(DIEMSV instance);
    partial void UpdateDIEMSV(DIEMSV instance);
    partial void DeleteDIEMSV(DIEMSV instance);
    partial void InsertSINHVIEN(SINHVIEN instance);
    partial void UpdateSINHVIEN(SINHVIEN instance);
    partial void DeleteSINHVIEN(SINHVIEN instance);
    partial void InsertLOP(LOP instance);
    partial void UpdateLOP(LOP instance);
    partial void DeleteLOP(LOP instance);
    partial void InsertMONHOC(MONHOC instance);
    partial void UpdateMONHOC(MONHOC instance);
    partial void DeleteMONHOC(MONHOC instance);
    #endregion
		
		public QLSVDatabaseDataContext() : 
				base(global::QuanLySV.Properties.Settings.Default.QuanLySinhVienConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QLSVDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLSVDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLSVDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLSVDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DIEMSV> DIEMSVs
		{
			get
			{
				return this.GetTable<DIEMSV>();
			}
		}
		
		public System.Data.Linq.Table<SINHVIEN> SINHVIENs
		{
			get
			{
				return this.GetTable<SINHVIEN>();
			}
		}
		
		public System.Data.Linq.Table<LOP> LOPs
		{
			get
			{
				return this.GetTable<LOP>();
			}
		}
		
		public System.Data.Linq.Table<MONHOC> MONHOCs
		{
			get
			{
				return this.GetTable<MONHOC>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIEMSV")]
	public partial class DIEMSV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MASV;
		
		private string _MAMH;
		
		private double _DIEM;
		
		private EntityRef<SINHVIEN> _SINHVIEN;
		
		private EntityRef<MONHOC> _MONHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMASVChanging(string value);
    partial void OnMASVChanged();
    partial void OnMAMHChanging(string value);
    partial void OnMAMHChanged();
    partial void OnDIEMChanging(double value);
    partial void OnDIEMChanged();
    #endregion
		
		public DIEMSV()
		{
			this._SINHVIEN = default(EntityRef<SINHVIEN>);
			this._MONHOC = default(EntityRef<MONHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MASV", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MASV
		{
			get
			{
				return this._MASV;
			}
			set
			{
				if ((this._MASV != value))
				{
					if (this._SINHVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMASVChanging(value);
					this.SendPropertyChanging();
					this._MASV = value;
					this.SendPropertyChanged("MASV");
					this.OnMASVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMH", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAMH
		{
			get
			{
				return this._MAMH;
			}
			set
			{
				if ((this._MAMH != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMHChanging(value);
					this.SendPropertyChanging();
					this._MAMH = value;
					this.SendPropertyChanged("MAMH");
					this.OnMAMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEM", DbType="Float NOT NULL")]
		public double DIEM
		{
			get
			{
				return this._DIEM;
			}
			set
			{
				if ((this._DIEM != value))
				{
					this.OnDIEMChanging(value);
					this.SendPropertyChanging();
					this._DIEM = value;
					this.SendPropertyChanged("DIEM");
					this.OnDIEMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_DIEMSV", Storage="_SINHVIEN", ThisKey="MASV", OtherKey="MASV", IsForeignKey=true)]
		public SINHVIEN SINHVIEN
		{
			get
			{
				return this._SINHVIEN.Entity;
			}
			set
			{
				SINHVIEN previousValue = this._SINHVIEN.Entity;
				if (((previousValue != value) 
							|| (this._SINHVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SINHVIEN.Entity = null;
						previousValue.DIEMSVs.Remove(this);
					}
					this._SINHVIEN.Entity = value;
					if ((value != null))
					{
						value.DIEMSVs.Add(this);
						this._MASV = value.MASV;
					}
					else
					{
						this._MASV = default(string);
					}
					this.SendPropertyChanged("SINHVIEN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_DIEMSV", Storage="_MONHOC", ThisKey="MAMH", OtherKey="MAMH", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.DIEMSVs.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.DIEMSVs.Add(this);
						this._MAMH = value.MAMH;
					}
					else
					{
						this._MAMH = default(string);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SINHVIEN")]
	public partial class SINHVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MASV;
		
		private string _TENSV;
		
		private string _DCSV;
		
		private string _MALP;
		
		private EntitySet<DIEMSV> _DIEMSVs;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMASVChanging(string value);
    partial void OnMASVChanged();
    partial void OnTENSVChanging(string value);
    partial void OnTENSVChanged();
    partial void OnDCSVChanging(string value);
    partial void OnDCSVChanged();
    partial void OnMALPChanging(string value);
    partial void OnMALPChanged();
    #endregion
		
		public SINHVIEN()
		{
			this._DIEMSVs = new EntitySet<DIEMSV>(new Action<DIEMSV>(this.attach_DIEMSVs), new Action<DIEMSV>(this.detach_DIEMSVs));
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MASV", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MASV
		{
			get
			{
				return this._MASV;
			}
			set
			{
				if ((this._MASV != value))
				{
					this.OnMASVChanging(value);
					this.SendPropertyChanging();
					this._MASV = value;
					this.SendPropertyChanged("MASV");
					this.OnMASVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENSV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TENSV
		{
			get
			{
				return this._TENSV;
			}
			set
			{
				if ((this._TENSV != value))
				{
					this.OnTENSVChanging(value);
					this.SendPropertyChanging();
					this._TENSV = value;
					this.SendPropertyChanged("TENSV");
					this.OnTENSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DCSV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DCSV
		{
			get
			{
				return this._DCSV;
			}
			set
			{
				if ((this._DCSV != value))
				{
					this.OnDCSVChanging(value);
					this.SendPropertyChanging();
					this._DCSV = value;
					this.SendPropertyChanged("DCSV");
					this.OnDCSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MALP
		{
			get
			{
				return this._MALP;
			}
			set
			{
				if ((this._MALP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALPChanging(value);
					this.SendPropertyChanging();
					this._MALP = value;
					this.SendPropertyChanged("MALP");
					this.OnMALPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_DIEMSV", Storage="_DIEMSVs", ThisKey="MASV", OtherKey="MASV")]
		public EntitySet<DIEMSV> DIEMSVs
		{
			get
			{
				return this._DIEMSVs;
			}
			set
			{
				this._DIEMSVs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_SINHVIEN", Storage="_LOP", ThisKey="MALP", OtherKey="MALP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.SINHVIENs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.SINHVIENs.Add(this);
						this._MALP = value.MALP;
					}
					else
					{
						this._MALP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIEMSVs(DIEMSV entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = this;
		}
		
		private void detach_DIEMSVs(DIEMSV entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOP")]
	public partial class LOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALP;
		
		private string _TENLP;
		
		private string _NK;
		
		private EntitySet<SINHVIEN> _SINHVIENs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALPChanging(string value);
    partial void OnMALPChanged();
    partial void OnTENLPChanging(string value);
    partial void OnTENLPChanged();
    partial void OnNKChanging(string value);
    partial void OnNKChanged();
    #endregion
		
		public LOP()
		{
			this._SINHVIENs = new EntitySet<SINHVIEN>(new Action<SINHVIEN>(this.attach_SINHVIENs), new Action<SINHVIEN>(this.detach_SINHVIENs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALP
		{
			get
			{
				return this._MALP;
			}
			set
			{
				if ((this._MALP != value))
				{
					this.OnMALPChanging(value);
					this.SendPropertyChanging();
					this._MALP = value;
					this.SendPropertyChanged("MALP");
					this.OnMALPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TENLP
		{
			get
			{
				return this._TENLP;
			}
			set
			{
				if ((this._TENLP != value))
				{
					this.OnTENLPChanging(value);
					this.SendPropertyChanging();
					this._TENLP = value;
					this.SendPropertyChanged("TENLP");
					this.OnTENLPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NK", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NK
		{
			get
			{
				return this._NK;
			}
			set
			{
				if ((this._NK != value))
				{
					this.OnNKChanging(value);
					this.SendPropertyChanging();
					this._NK = value;
					this.SendPropertyChanged("NK");
					this.OnNKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_SINHVIEN", Storage="_SINHVIENs", ThisKey="MALP", OtherKey="MALP")]
		public EntitySet<SINHVIEN> SINHVIENs
		{
			get
			{
				return this._SINHVIENs;
			}
			set
			{
				this._SINHVIENs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MONHOC")]
	public partial class MONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAMH;
		
		private string _TENMH;
		
		private int _SOTC;
		
		private EntitySet<DIEMSV> _DIEMSVs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAMHChanging(string value);
    partial void OnMAMHChanged();
    partial void OnTENMHChanging(string value);
    partial void OnTENMHChanged();
    partial void OnSOTCChanging(int value);
    partial void OnSOTCChanged();
    #endregion
		
		public MONHOC()
		{
			this._DIEMSVs = new EntitySet<DIEMSV>(new Action<DIEMSV>(this.attach_DIEMSVs), new Action<DIEMSV>(this.detach_DIEMSVs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMH", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAMH
		{
			get
			{
				return this._MAMH;
			}
			set
			{
				if ((this._MAMH != value))
				{
					this.OnMAMHChanging(value);
					this.SendPropertyChanging();
					this._MAMH = value;
					this.SendPropertyChanged("MAMH");
					this.OnMAMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENMH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TENMH
		{
			get
			{
				return this._TENMH;
			}
			set
			{
				if ((this._TENMH != value))
				{
					this.OnTENMHChanging(value);
					this.SendPropertyChanging();
					this._TENMH = value;
					this.SendPropertyChanged("TENMH");
					this.OnTENMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTC", DbType="Int NOT NULL")]
		public int SOTC
		{
			get
			{
				return this._SOTC;
			}
			set
			{
				if ((this._SOTC != value))
				{
					this.OnSOTCChanging(value);
					this.SendPropertyChanging();
					this._SOTC = value;
					this.SendPropertyChanged("SOTC");
					this.OnSOTCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_DIEMSV", Storage="_DIEMSVs", ThisKey="MAMH", OtherKey="MAMH")]
		public EntitySet<DIEMSV> DIEMSVs
		{
			get
			{
				return this._DIEMSVs;
			}
			set
			{
				this._DIEMSVs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIEMSVs(DIEMSV entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_DIEMSVs(DIEMSV entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
	}
}
#pragma warning restore 1591
